{
 "etype": "TypeError",
 "evalue": "TypeError('Object of type function is not JSON serializable')",
 "exception": {
  "args": [
   40,
   39,
   79,
   98,
   106,
   101,
   99,
   116,
   32,
   111,
   102,
   32,
   116,
   121,
   112,
   101,
   32,
   102,
   117,
   110,
   99,
   116,
   105,
   111,
   110,
   32,
   105,
   115,
   32,
   110,
   111,
   116,
   32,
   74,
   83,
   79,
   78,
   32,
   115,
   101,
   114,
   105,
   97,
   108,
   105,
   122,
   97,
   98,
   108,
   101,
   39,
   44,
   41
  ],
  "with_traceback": [
   60,
   98,
   117,
   105,
   108,
   116,
   45,
   105,
   110,
   32,
   109,
   101,
   116,
   104,
   111,
   100,
   32,
   119,
   105,
   116,
   104,
   95,
   116,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   111,
   102,
   32,
   84,
   121,
   112,
   101,
   69,
   114,
   114,
   111,
   114,
   32,
   111,
   98,
   106,
   101,
   99,
   116,
   62
  ]
 },
 "frames": [
  {
   "call": "(request=<Request 'http://library.test:8000/' [POST]>)",
   "dump": {
    "global init_request": "<function init_request>",
    "request": "<Request 'http://library.test:8000/' [POST]>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/app.py",
   "func": "application",
   "lines": {
    "84": "\t\trollback = True",
    "85": "",
    "86": "\t\tinit_request(request)",
    "87": "",
    "88": "\t\tfrappe.api.validate_auth()"
   },
   "lnum": 86
  },
  {
   "call": "(request=<Request 'http://library.test:8000/' [POST]>)",
   "dump": {
    "frappe. auth": "<module 'frappe.auth' from '/home/frappe/frappe-bench/apps/frappe/frappe/auth.py'>",
    "frappe. local": "<werkzeug.local.Local object>",
    "frappe.auth. HTTPRequest": "<class 'frappe.auth.HTTPRequest'>",
    "frappe.local.http_request": "undefined",
    "global frappe": "<module 'frappe' from '/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/app.py",
   "func": "init_request",
   "lines": {
    "175": "",
    "176": "\tif request.method != \"OPTIONS\":",
    "177": "\t\tfrappe.local.http_request = frappe.auth.HTTPRequest()",
    "178": "",
    "179": "\tfor before_request_task in frappe.get_hooks(\"before_request\"):"
   },
   "lnum": 177
  },
  {
   "call": "(self=<frappe.auth.HTTPRequest object>)",
   "dump": {
    "self": "<frappe.auth.HTTPRequest object>",
    "self. set_session": "<bound method HTTPRequest.set_session of <frappe.auth.HTTPRequest object>>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "__init__",
   "lines": {
    "36": "",
    "37": "\t\t# login and start/resume user session",
    "38": "\t\tself.set_session()",
    "39": "",
    "40": "\t\t# set request language"
   },
   "lnum": 38
  },
  {
   "call": "(self=<frappe.auth.HTTPRequest object>)",
   "dump": {
    "frappe. local": "<werkzeug.local.Local object>",
    "frappe.local.login_manager": "undefined",
    "global LoginManager": "<class 'frappe.auth.LoginManager'>",
    "global frappe": "<module 'frappe' from '/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "set_session",
   "lines": {
    "70": "",
    "71": "\tdef set_session(self):",
    "72": "\t\tfrappe.local.login_manager = LoginManager()",
    "73": "",
    "74": "\tdef validate_csrf_token(self):"
   },
   "lnum": 72
  },
  {
   "call": "(self=<frappe.auth.LoginManager object>)",
   "dump": {
    "self": "<frappe.auth.LoginManager object>",
    "self. login": "<bound method LoginManager.login of <frappe.auth.LoginManager object>>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "__init__",
   "lines": {
    "107": "",
    "108": "\t\tif frappe.local.form_dict.get(\"cmd\") == \"login\" or frappe.local.request.path == \"/api/method/login\":",
    "109": "\t\t\tif self.login() is False:",
    "110": "\t\t\t\treturn",
    "111": "\t\t\tself.resume = False"
   },
   "lnum": 109
  },
  {
   "call": "(self=<frappe.auth.LoginManager object>)",
   "dump": {
    "self": "<frappe.auth.LoginManager object>",
    "self. post_login": "<bound method LoginManager.post_login of <frappe.auth.LoginManager object>>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "login",
   "lines": {
    "144": "\t\t\t\treturn False",
    "145": "\t\tfrappe.form_dict.pop(\"pwd\", None)",
    "146": "\t\tself.post_login()",
    "147": "",
    "148": "\tdef post_login(self):"
   },
   "lnum": 146
  },
  {
   "call": "(self=<frappe.auth.LoginManager object>)",
   "dump": {
    "self": "<frappe.auth.LoginManager object>",
    "self. run_trigger": "<bound method LoginManager.run_trigger of <frappe.auth.LoginManager object>>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "post_login",
   "lines": {
    "147": "",
    "148": "\tdef post_login(self):",
    "149": "\t\tself.run_trigger(\"on_login\")",
    "150": "\t\tvalidate_ip_address(self.user)",
    "151": "\t\tself.validate_hour()"
   },
   "lnum": 149
  },
  {
   "call": "(self=<frappe.auth.LoginManager object>, event='on_login')",
   "dump": {
    "frappe. call": "<function call>",
    "frappe. get_attr": "<function get_attr>",
    "global frappe": "<module 'frappe' from '/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "login_manager": "undefined",
    "method": "'library_management.library_management.doctype.employees.employees.on_login'",
    "self": "<frappe.auth.LoginManager object>"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "run_trigger",
   "lines": {
    "301": "\tdef run_trigger(self, event=\"on_login\"):",
    "302": "\t\tfor method in frappe.get_hooks().get(event, []):",
    "303": "\t\t\tfrappe.call(frappe.get_attr(method), login_manager=self)",
    "304": "",
    "305": "\tdef validate_hour(self):"
   },
   "lnum": 303
  },
  {
   "call": "(fn=<function on_login>, *args=(), **kwargs={'login_manager': <frappe.auth.LoginManager object>})",
   "dump": {
    "args": "()",
    "fn": "<function on_login>",
    "newargs": "{'login_manager': <frappe.auth.LoginManager object>}"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py",
   "func": "call",
   "lines": {
    "1617": "\tnewargs = get_newargs(fn, kwargs)",
    "1618": "",
    "1619": "\treturn fn(*args, **newargs)",
    "1620": "",
    "1621": ""
   },
   "lnum": 1619
  },
  {
   "call": "(login_manager=<frappe.auth.LoginManager object>)",
   "dump": {
    "frappe. msgprint": "<function msgprint>",
    "frappe.hide_msgprint": "undefined",
    "global frappe": "<module 'frappe' from '/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "indicator": "undefined",
    "msg": "undefined",
    "primary_action": "undefined",
    "title": "undefined"
   },
   "file": "/home/frappe/frappe-bench/apps/library_management/library_management/library_management/doctype/employees/employees.py",
   "func": "on_login",
   "lines": {
    "25": "\tif current_user[4] and today.month == current_user[4].month and today.day == current_user[4].day:",
    "26": "\t\tif frappe.session.user != 'Guest':  # Check if user is logged in",
    "27": "\t\t\tfrappe.msgprint(",
    "28": "\t\t\t\tmsg=f\"\ud83c\udf88 Happy Birthday {current_user[0]}! \ud83c\udf82\",",
    "29": "\t\t\t\ttitle=\"Birthday Wishes\","
   },
   "lnum": 27
  },
  {
   "call": "(msg='\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82', title='Birthday Wishes', raise_exception=False, as_table=False, as_list=False, indicator='green', alert=False, primary_action={'action': <function on_login.<locals>.<lambda>>, 'label': 'Thank you!'}, is_minimizable=False, wide=False, realtime=False)",
   "dump": {
    "global json": "<module 'json' from '/usr/lib/python3.10/json/__init__.py'>",
    "global message_log": "[]",
    "json. dumps": "<function dumps>",
    "message_log. append": "<built-in method append of list object>",
    "out": "{'message': '\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82',...n on_login.<locals>.<lambda> at 0x7f8a33f6c670>}}"
   },
   "file": "/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py",
   "func": "msgprint",
   "lines": {
    "502": "\t\tpublish_realtime(event=\"msgprint\", message=out)",
    "503": "\telse:",
    "504": "\t\tmessage_log.append(json.dumps(out))",
    "505": "",
    "506": "\tif raise_exception and hasattr(raise_exception, \"__name__\"):"
   },
   "lnum": 504
  },
  {
   "call": "(obj={'message': '\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82',...n on_login.<locals>.<lambda> at 0x7f8a33f6c670>}}, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw={})",
   "dump": {
    "_default_encoder. encode": "<bound method JSONEncoder.encode of <json.encoder.JSONEncoder object>>",
    "global _default_encoder": "<json.encoder.JSONEncoder object>",
    "obj": "{'message': '\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82',...n on_login.<locals>.<lambda> at 0x7f8a33f6c670>}}"
   },
   "file": "/usr/lib/python3.10/json/__init__.py",
   "func": "dumps",
   "lines": {
    "229": "        cls is None and indent is None and separators is None and",
    "230": "        default is None and not sort_keys and not kw):",
    "231": "        return _default_encoder.encode(obj)",
    "232": "    if cls is None:",
    "233": "        cls = JSONEncoder"
   },
   "lnum": 231
  },
  {
   "call": "(self=<json.encoder.JSONEncoder object>, o={'message': '\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82',...n on_login.<locals>.<lambda> at 0x7f8a33f6c670>}})",
   "dump": {
    "_one_shot": "undefined",
    "chunks": "undefined",
    "o": "{'message': '\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82',...n on_login.<locals>.<lambda> at 0x7f8a33f6c670>}}",
    "self": "<json.encoder.JSONEncoder object>",
    "self. iterencode": "<bound method JSONEncoder.iterencode of <json.encoder.JSONEncoder object>>"
   },
   "file": "/usr/lib/python3.10/json/encoder.py",
   "func": "encode",
   "lines": {
    "197": "        # exceptions aren't as detailed.  The list call should be roughly",
    "198": "        # equivalent to the PySequence_Fast that ''.join() would do.",
    "199": "        chunks = self.iterencode(o, _one_shot=True)",
    "200": "        if not isinstance(chunks, (list, tuple)):",
    "201": "            chunks = list(chunks)"
   },
   "lnum": 199
  },
  {
   "call": "(self=<json.encoder.JSONEncoder object>, o={'message': '\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82',...n on_login.<locals>.<lambda> at 0x7f8a33f6c670>}}, _one_shot=True)",
   "dump": {
    "_iterencode": "<_json.Encoder object>",
    "o": "{'message': '\ud83c\udf88 Happy Birthday Administrator! \ud83c\udf82',...n on_login.<locals>.<lambda> at 0x7f8a33f6c670>}}"
   },
   "file": "/usr/lib/python3.10/json/encoder.py",
   "func": "iterencode",
   "lines": {
    "255": "                self.key_separator, self.item_separator, self.sort_keys,",
    "256": "                self.skipkeys, _one_shot)",
    "257": "        return _iterencode(o, 0)",
    "258": "",
    "259": "def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,"
   },
   "lnum": 257
  },
  {
   "call": "(self=<json.encoder.JSONEncoder object>, o=<function on_login.<locals>.<lambda>>)",
   "dump": {
    "builtin TypeError": "<class 'TypeError'>"
   },
   "file": "/usr/lib/python3.10/json/encoder.py",
   "func": "default",
   "lines": {
    "177": "",
    "178": "        \"\"\"",
    "179": "        raise TypeError(f'Object of type {o.__class__.__name__} '",
    "180": "                        f'is not JSON serializable')",
    "181": ""
   },
   "lnum": 179
  }
 ],
 "locals": {
  "o": "<function on_login.<locals>.<lambda>>",
  "self": "<json.encoder.JSONEncoder object>"
 },
 "pyver": "Python 3.10.16: /home/frappe/frappe-bench/env/bin/python (prefix: /home/frappe/frappe-bench/env)",
 "timestamp": "2025-01-10 05:36:03.041062",
 "traceback": "Traceback (most recent call last):\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/app.py\", line 86, in application\n    init_request(request)\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/app.py\", line 177, in init_request\n    frappe.local.http_request = frappe.auth.HTTPRequest()\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/auth.py\", line 38, in __init__\n    self.set_session()\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/auth.py\", line 72, in set_session\n    frappe.local.login_manager = LoginManager()\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/auth.py\", line 109, in __init__\n    if self.login() is False:\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/auth.py\", line 146, in login\n    self.post_login()\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/auth.py\", line 149, in post_login\n    self.run_trigger(\"on_login\")\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/auth.py\", line 303, in run_trigger\n    frappe.call(frappe.get_attr(method), login_manager=self)\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py\", line 1619, in call\n    return fn(*args, **newargs)\n  File \"/home/frappe/frappe-bench/apps/library_management/library_management/library_management/doctype/employees/employees.py\", line 27, in on_login\n    frappe.msgprint(\n  File \"/home/frappe/frappe-bench/apps/frappe/frappe/__init__.py\", line 504, in msgprint\n    message_log.append(json.dumps(out))\n  File \"/usr/lib/python3.10/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type function is not JSON serializable\n"
}